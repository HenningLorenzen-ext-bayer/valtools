% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dynamic_referencing.R
\name{vt_dynamic_referencer}
\alias{vt_dynamic_referencer}
\alias{Dynamic}
\alias{Referencing}
\title{Manage dynamic refrerencing}
\description{
Manage dynamic refrerencing

Manage dynamic refrerencing
}
\details{
The job of the dynamic referencer is to aggregate the references that exist from
specifications, test cases, test code and in the validation report and
update them accordingly. This helps with the painful cases where a new reference
may be added between existing numbering and all subsequent references need to be
updated

The user should not need to use this object directly, it will be called upon
on rendering of the contents in the validation report.

By default, the expected indicator for a reference is "@", though this can be
changed. A reference starts with the indicator (@) and can then be any
contiguous (no white spaces or special characters) alphanumeric sequence, or include
an underscore or dash. ie. @THISIS_A-reference1234 is valid for the entire string,
but @THISIS_A-reference.12345 is a dynamic reference up to the ".".

The method 'scrape_references' takes in a vector of strings, and an indicator whether
the input file text is a specification ('spec'), test case ('test_case') or
test code ('test_code'). This allows numbering to increase independently for each.
However, every reference must be unique. ie. @reference whether it shows up in a
test case or spec will be the same reference.

The method 'reference_insertion' takes a vector of strings and replaces references
with their numeric values.
}
\examples{

reference <- vt_dynamic_referencer$new()
reference



## ------------------------------------------------
## Method `vt_dynamic_referencer$scrape_references`
## ------------------------------------------------

ref <- vt_dynamic_referencer$new()
ref$list_references()
ref$scrape_references("@new_reference")
ref$list_references()

## ------------------------------------------------
## Method `vt_dynamic_referencer$reference_insertion`
## ------------------------------------------------

ref <- vt_dynamic_referencer$new()
ref$list_references()
ref$scrape_references("@new_reference")
ref$list_references()
ref$reference_insertion("This is my @new_reference")

## ------------------------------------------------
## Method `vt_dynamic_referencer$list_references`
## ------------------------------------------------

ref <- vt_dynamic_referencer$new()
ref$list_references()
ref$scrape_references("@new_reference")
ref$list_references()
}
\keyword{internal}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-scrape_references}{\code{vt_dynamic_referencer$scrape_references()}}
\item \href{#method-reference_insertion}{\code{vt_dynamic_referencer$reference_insertion()}}
\item \href{#method-list_references}{\code{vt_dynamic_referencer$list_references()}}
\item \href{#method-new}{\code{vt_dynamic_referencer$new()}}
\item \href{#method-clone}{\code{vt_dynamic_referencer$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-scrape_references"></a>}}
\if{latex}{\out{\hypertarget{method-scrape_references}{}}}
\subsection{Method \code{scrape_references()}}{
collect references from text.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{vt_dynamic_referencer$scrape_references(
  text,
  type = c("spec", "test_case", "test_code")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{character vector to collect references from.}

\item{\code{type}}{type of file being converted; a specification ('spec'), test case ('test_case') or
test code ('test_code')}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ref <- vt_dynamic_referencer$new()
ref$list_references()
ref$scrape_references("@new_reference")
ref$list_references()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reference_insertion"></a>}}
\if{latex}{\out{\hypertarget{method-reference_insertion}{}}}
\subsection{Method \code{reference_insertion()}}{
replace references in text with values
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{vt_dynamic_referencer$reference_insertion(text)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{character vector to be inserting references into}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ref <- vt_dynamic_referencer$new()
ref$list_references()
ref$scrape_references("@new_reference")
ref$list_references()
ref$reference_insertion("This is my @new_reference")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-list_references"></a>}}
\if{latex}{\out{\hypertarget{method-list_references}{}}}
\subsection{Method \code{list_references()}}{
list references available and their value
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{vt_dynamic_referencer$list_references()}\if{html}{\out{</div>}}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ref <- vt_dynamic_referencer$new()
ref$list_references()
ref$scrape_references("@new_reference")
ref$list_references()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
create a new dynamic reference object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{vt_dynamic_referencer$new(reference_indicator = "@@")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reference_indicator}}{character vector that indicates the start of the dynamic references. defaults to "@"}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a new \code{vt_dynamic_reference} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{vt_dynamic_referencer$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
